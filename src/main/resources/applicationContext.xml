<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">

	<context:component-scan base-package="com.springquick" />
	
	<aop:aspectj-autoproxy />
	
	<!--
	<bean id="userService" class="com.springquick.user.impl.UserServiceImpl">
		<property name="userDAO" ref="userDAO" />
	</bean>
	
	<bean id="userDAO" class="com.springquick.user.impl.UserDAO" />
	-->
	
	<!--
	<bean id="log" class="com.springquick.common.LogAdvice" />
	<bean id="before" class="com.springquick.common.BeforeAdvice" />
	<bean id="afterReturning" class="com.springquick.common.AfterReturningAdvice" />
	<bean id="afterThrowing" class="com.springquick.common.AfterThrowingAdvice" />
	<bean id="after" class="com.springquick.common.AfterAdvice" />
	<bean id="around" class="com.springquick.common.AroundAdvice" />
	-->
	
	<!-- <aop:config> -->
	<!-- 
		<aop:pointcut id="allPointcut"
		  			  expression="execution(* com.springquick..*Impl.*(..))" />
	    <aop:pointcut id="getPointcut"
		  			  expression="execution(* com.springquick..*Impl.get*(..))" />
	-->
		<!-- <aop:aspect ref="around"> -->
			<!-- <aop:before pointcut-ref="allPointcut" method="printLog" /> -->
			<!-- <aop:before pointcut-ref="allPointcut" method="beforeLog" /> -->
			<!-- <aop:after-returning pointcut-ref="getPointcut" method="afterLog" returning="_returnObj"/> -->
			<!-- <aop:after-throwing pointcut-ref="allPointcut" method="exceptionLog" throwing="_exceptObj" /> -->
			<!-- <aop:after pointcut-ref="allPointcut" method="finallyLog" /> -->
			<!-- <aop:around pointcut-ref="allPointcut" method="aroundLog" /> -->
		<!-- </aop:aspect> -->
	<!-- </aop:config> -->
	
	<!-- DataSource 설정 -->
	<context:property-placeholder location="classpath:config/db.properties" />
	
	<bean id="dataSource"
		class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"
		lazy-init="false">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<!-- Spring JDBC 설정 -->
	<bean id="jdbcTemplate"
		class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- Transaction 설정 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />	
	</bean>
	
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	 
	<aop:config>
		<aop:pointcut id="txPointcut"
					expression="execution(* com.springquick..*(..))" />
		<!-- <aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice" /> -->
	</aop:config>
		
	<!-- Spring과 Mybatis 연동 설정 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" value="classpath:sql-map-config.xml"/>
	</bean>
	<bean class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSession"></constructor-arg>
	</bean>
</beans>
